service: tmunan-orc

provider:
  name: aws
  stage: prod
  runtime: python3.11
  region: eu-west-1
  environment:
    ECS_CLUSTER_NAME: tmunan_cluster
    TASK_DEFINITION: tmunan_task
    CONTAINER_NAME: stream
    DYNAMODB_TABLE: ${self:service}_${self:provider.stage}_sessions
    AUTH0_DOMAIN: dev-68iu6g42wy1qjtkd.eu.auth0.com
    API_AUDIENCE: https://api.tmunan.icu
  iam:
    role: arn:aws:iam::090268630745:role/github_deploy_role
  deploymentBucket:
    name: tmunan-deployment-bucket
    serverSideEncryption: AES256  # Optional: Enables server-side encryption

package:
  individually: true
  exclude:
    - ".*/**"

resources:
  Resources:
    SessionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: session_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: session_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

functions:

  authLambda:
    handler: handler.lambda_handler
    events:
      - http:
          path: authorizer
          method: POST
    environment:
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
      API_AUDIENCE: ${env:API_AUDIENCE}

  api:
    handler: orc.sessions.rest_api.handler
    role: arn:aws:iam::090268630745:role/tmunan_orc_execution_role
    package:
      include:
        - orc/**
    events:
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            name: authLambda
            type: request             # Custom request authorizer
            resultTtlInSeconds: 60    # Disabling caching (optional, set to cache results)
            identitySource: method.request.header.Authorization
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-authLambda

#  run_session:
#    handler: orc.run_session.handler.run_session
#    role: arn:aws:iam::090268630745:role/tmunan_orc_execution_role
#    package:
#      include:
#        - orc/**
#    events:
#      - http:
#          path: run_session
#          method: post

  register_usage:
    handler: orc.register_usage.handler.register_usage
    role: arn:aws:iam::090268630745:role/tmunan_orc_execution_role
    package:
      include:
        - orc/**
    events:
      - eventBridge:
          pattern:
            source:
              - tmunan.task
            detail-type:
              - tmunan.usage.update

plugins:
  - serverless-python-requirements
